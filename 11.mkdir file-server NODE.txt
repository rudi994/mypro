mkdir file-server
cd file-server
npm init -y


SERVER.JS
const http = require('http');
const fs = require('fs');
const url = require('url');

// Create an HTTP server
const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const method = req.method;

  // Route for creating a file
  if (method === 'POST' && parsedUrl.pathname === '/create') {
    let body = '';

    req.on('data', chunk => {
      body += chunk.toString(); // Convert Buffer to string
    });

    req.on('end', () => {
      fs.writeFile(body, 'File created successfully!', (err) => {
        if (err) {
          res.writeHead(500);
          res.end('Error creating file');
        } else {
          res.writeHead(200);
          res.end('File created successfully');
        }
      });
    });

  // Route for reading a file
  } else if (method === 'GET' && parsedUrl.pathname === '/read') {
    const fileName = parsedUrl.query.name;

    fs.readFile(fileName, 'utf8', (err, data) => {
      if (err) {
        res.writeHead(404);
        res.end('File not found');
      } else {
        res.writeHead(200);
        res.end(data);
      }
    });

  // Route for appending to a file
  } else if (method === 'POST' && parsedUrl.pathname === '/append') {
    const fileName = parsedUrl.query.name;
    const content = parsedUrl.query.content;

    fs.appendFile(fileName, `\n${content}`, (err) => {
      if (err) {
        res.writeHead(500);
        res.end('Error appending to file');
      } else {
        res.writeHead(200);
        res.end('Content appended successfully');
      }
    });

  // Route for deleting a file
  } else if (method === 'DELETE' && parsedUrl.pathname === '/delete') {
    const fileName = parsedUrl.query.name;

    fs.unlink(fileName, (err) => {
      if (err) {
        res.writeHead(500);
        res.end('Error deleting file');
      } else {
        res.writeHead(200);
        res.end('File deleted successfully');
      }
    });

  // Handle invalid routes
  } else {
    res.writeHead(404);
    res.end('Invalid route');
  }
});

// Start the server on port 3000
server.listen(3000, () => {
  console.log('File server running at http://localhost:3000/');
});
